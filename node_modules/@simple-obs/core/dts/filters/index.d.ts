import { Filter } from "../Filter";
export declare class CropPadFilter extends Filter<{
    bottom: number;
    left: number;
    relative: boolean;
    right: number;
    rop: number;
}> {
    type: string;
}
export declare class LumaKeyFilter extends Filter<{
    luma_max: number;
    luma_max_smooth: number;
    luma_min: number;
    luma_min_smooth: number;
}> {
    type: string;
}
export declare class ApplyLUTFilter extends Filter<{
    image_path: string;
}> {
    type: string;
}
export declare class ColorCorrectionFilter extends Filter<{
    brightness: number;
    color_add: number;
    color_multiply: number;
    contrast: number;
    gamma: number;
    hue_shift: number;
    opacity: number;
    saturation: number;
}> {
    type: string;
}
export declare enum ChromaKeyColorType {
    Green = "green",
    Blue = "blue",
    Magenta = "magenta",
    Custom = "custom"
}
export declare class ChromaKeyFilter extends Filter<{
    brightness: number;
    contrast: number;
    gamma: number;
    key_color: number;
    key_color_type: ChromaKeyColorType;
    opacity: number;
    similarity: number;
    smoothness: number;
    spill: number;
}> {
    type: string;
}
export declare enum ColorKeyColorType {
    Green = "green",
    Blue = "blue",
    Red = "red",
    Magenta = "magenta",
    Custom = "custom"
}
export declare class ColorKeyFilter extends Filter<{
    brightness: number;
    contrast: number;
    gamma: number;
    key_color: number;
    key_color_type: ColorKeyColorType;
    opacity: number;
    similarity: number;
    smoothness: number;
}> {
    type: string;
}
export declare class AspectRatioFilter extends Filter<{
    resolution: string;
    sampling: string;
}> {
    type: string;
}
export declare class ApplyLutFilter extends Filter<{
    image_path: string;
}> {
    type: string;
}
export declare enum MaskBlendSelect {
    AlphaMaskAlphaChannel = "mask_alpha_filter.effect",
    AlphaMaskColourChannel = "mask_colour_filter.effect",
    BlendMultiply = "blend_mul_filter.effect",
    BlendAddition = "blend_add_filter.effect",
    BlendSubtraction = "blend_sub_filter.effect"
}
export declare class ImageMaskBlendFilter extends Filter<{
    image_path: string;
    type: MaskBlendSelect;
}> {
    type: string;
}
export declare class RenderDelayFilter extends Filter<{
    delay_ms: number;
}> {
    type: string;
}
export declare class ScrollFilter extends Filter<{
    limit_cx: boolean;
    limit_cy: boolean;
    loop: boolean;
    speed_x: number;
    speed_y: number;
}> {
    type: string;
}
export declare class SharpenFilter extends Filter<{
    sharpness: number;
}> {
    type: string;
}
export declare class CompressorFilter extends Filter<{
    ratio: number;
    threshold: number;
    attack_time: number;
    release_time: number;
    output_gain: number;
    sidechain_source: string;
}> {
    type: string;
}
export declare enum ExpanderDetectorType {
    RMS = "RMS",
    Peak = "peak"
}
export declare enum ExpanderPreset {
    Expander = "expander",
    Gate = "gate"
}
export declare class ExpanderFilter extends Filter<{
    ratio: number;
    threshold: number;
    attack_time: number;
    release_time: number;
    output_gain: number;
    detector: ExpanderDetectorType;
    presets: ExpanderPreset;
}> {
    type: string;
}
export declare class GainFilter extends Filter<{
    db: number;
}> {
    type: string;
}
export declare class InvertPolarityFilter extends Filter<{}> {
    type: string;
}
export declare class LimiterFilter extends Filter<{
    threshold: number;
    release_time: number;
}> {
    type: string;
}
export declare class NoiseGateFilter extends Filter<{
    open_threshold: number;
    close_threshold: number;
    attack_time: number;
    hold_time: number;
    release_time: number;
}> {
    type: string;
}
export declare enum NoiseSuppressMethod {
    Speex = "speex",
    RNNoise = "rnnoise",
    NVAFX = "nvafx"
}
export declare class NoiseSuppressFilter extends Filter<{
    method: NoiseSuppressMethod;
}> {
    type: string;
}
//# sourceMappingURL=index.d.ts.map