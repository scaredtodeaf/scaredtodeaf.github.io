import { SceneItem, SceneItemProperties } from "./SceneItem";
import { ItemRef, Source, SourceSettings, SourceFilters } from "./Source";
import { DeepPartial } from "./types";
declare type ItemSchemaInput<T extends Source = Source> = {
    source: T;
} & DeepPartial<SceneItemProperties>;
declare type ItemsSchemaInput<Items extends Record<string, Source>> = {
    [K in keyof Items]: ItemSchemaInput<Items[K]>;
};
interface LinkOptions {
    setProperties: boolean;
    setSourceSettings: boolean;
}
export declare class Scene<Items extends Record<string, Source> = {}, Settings extends SourceSettings = {}, Filters extends SourceFilters = SourceFilters> extends Source<Settings, Filters> {
    type: string;
    items: {
        [K in keyof Items]: SceneItem<Items[K]>;
    } & Record<string, SceneItem>;
    private itemsSchema;
    /**
     * PUBLIC METHODS
     *
     * Methods that can be called by code that uses obs-js
     */
    /**  */
    constructor(args: {
        name: string;
        items: ItemsSchemaInput<Items>;
        filters?: Filters;
        settings?: DeepPartial<Settings>;
    });
    /**
     * Creates a scene in OBS and populates it with items as defined by the scene's items schema.
     *
     * Can be called normally, and is also called by `Scene.addItem` through the `Scene.createItem` override.
     */
    create(): Promise<this>;
    /**
     * Links to an existing scene in OBS, verifying that all sources as defined by the scene's items schema exist.
     * Will mark itself as existing if a matching scene is found, but will still throw if the items schema is not matched.
     */
    link(options?: Partial<LinkOptions>): Promise<void>;
    addItem<T extends Source>(ref: string, { source, ...properties }: ItemSchemaInput<T>): Promise<SceneItem<Source<SourceSettings, SourceFilters>, SceneItemProperties>>;
    /**
     * Just wraps `obs.createScene` and sets `this._exists`
     */
    private _create;
    /**
     * UTILITIES
     *
     * Utility functions that wrap basic OBS functions.
     */
    /** */
    makeCurrentScene(): Promise<{}>;
    remove(): Promise<void>;
    /**
     * CREATE ITEM OVERRIDES
     *
     * These are necessary since Scenes are different from regular Sources in how they
     * generate. They don't have a concept of an initial item as they can exist with 0 items.
     * Thus as long as the scene is initialized, `createInitialItem` can just call regular `createItem`
     */
    /**
     * @internal
     * @override
     */
    createItem(ref: ItemRef, scene: Scene): Promise<SceneItem<this>>;
    /**
     * @internal
     * @override
     */
    createInitialItem(ref: ItemRef, scene: Scene): Promise<SceneItem<this, SceneItemProperties>>;
}
export {};
//# sourceMappingURL=Scene.d.ts.map