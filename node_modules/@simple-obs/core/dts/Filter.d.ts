import { Source } from "./Source";
import { DeepPartial } from "./types";
export interface FilterArgs<Settings> {
    name: string;
    settings: DeepPartial<Settings>;
}
declare type FilterSettings = Record<string, any>;
export declare abstract class Filter<Settings extends FilterSettings = FilterSettings, TSource extends Source = Source> {
    /**
     * @internal
     */
    initialSettings: DeepPartial<Settings>;
    constructor({ name, settings }: FilterArgs<Settings>);
    abstract type: string;
    name: string;
    source?: TSource;
    settings: DeepPartial<Settings>;
    visible: boolean;
    _settingsType: Settings;
    setSettings(settings: DeepPartial<Settings>): Promise<void>;
    setVisible(visible: boolean): Promise<{}> | undefined;
}
export {};
//# sourceMappingURL=Filter.d.ts.map