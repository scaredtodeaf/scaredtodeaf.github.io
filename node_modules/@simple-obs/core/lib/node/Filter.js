'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

const index = require('./obs/index.js');

class Filter {
  /**
   * @internal
   */
  constructor({
    name,
    settings
  }) {
    _defineProperty(this, "initialSettings", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "source", void 0);

    _defineProperty(this, "settings", {});

    _defineProperty(this, "visible", true);

    _defineProperty(this, "_settingsType", void 0);

    this.name = name;
    this.initialSettings = settings;
  }

  async setSettings(settings) {
    if (!this.source) {
      console.warn(`Attempted to set settings on sourceless filter ${this.name}`);
      return;
    }

    await index.obs.setSourceFilterSettings({
      source: this.source.name,
      filter: this.name,
      settings: settings
    });

    for (let setting in settings) {
      this.settings[setting] = settings[setting];
    }
  }

  setVisible(visible) {
    if (!this.source) {
      console.warn(`Attempted to set visibility on sourceless filter ${this.name}`);
      return;
    }

    this.visible = visible;
    return index.obs.setSourceFilterVisibility({
      source: this.source.name,
      filter: this.name,
      visible
    });
  }

}

exports.Filter = Filter;
//# sourceMappingURL=Filter.js.map
